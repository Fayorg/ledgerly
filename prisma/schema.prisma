generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    password      String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    Workspace Workspace[]
}

model Workspace {
    id     String @id @default(cuid())
    owner  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    name String
    plan PLAN   @default(FREE)

    funds Fund[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum PLAN {
    FREE
    ENTRY
}

model Fund {
    id          String    @id @default(cuid())
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    name        String
    description String?
    amount      Float
    currency    String
    type        FundType

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum FundType {
    CRYPTO
    STOCK
    PROPERTY
    CASH
    BANK
    OTHER
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}
